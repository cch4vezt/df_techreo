{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "TechreoDF"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"linkedService_azurestoact_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService_azurestoact'"
		},
		"techreoprod_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'techreoprod'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://camedatalake.dfs.core.windows.net/"
		},
		"Trigger_x1s_properties_Pipeline_logEstructurado_depuracion_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@{addhours(trigger().scheduledTime, -1)}"
		},
		"Trigger_x1s_properties_Pipeline_logEstructurado_depuracion_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "@trigger().scheduledTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_logEstructurado_depuracion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Depuración de información por día",
				"activities": [
					{
						"name": "Copy_x1s",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "output-df/@{formatDateTime(pipeline().parameters.windowStart,'yy')}@{formatDateTime(pipeline().parameters.windowStart,'MM')}@{formatDateTime(pipeline().parameters.windowStart,'dd')}@{formatDateTime(pipeline().parameters.windowStart,'HH')}@{formatDateTime(pipeline().parameters.windowStart,'mm')}{seconds}/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select [Id]\n      ,[FechaHoraEventoUTC]\n      ,[Aplicativo]\n      ,[CodigoRastreo]\n      ,[RequestId]\n      ,[Severidad]\n      ,[Mensaje]\n      ,[Propiedades]\n      ,[Error]\n      ,[FechaHoraRegistro]\nfrom [Cmn_Log].[dbo].[logt_LogEstructurado]\nwhere [FechaHoraRegistro] between (\n\tselect top 1 [FechaHoraRegistro]\n\tfrom [Cmn_Log].[dbo].[logt_LogEstructurado]) and\n\t(select top 1 [FechaHoraRegistro] + 1\n\tfrom [Cmn_Log].[dbo].[logt_LogEstructurado]\n\t)\norder by [Id] asc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['Id']"
										}
									},
									{
										"source": {
											"name": "FechaHoraEventoUTC",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['FechaHoraEventoUTC']"
										}
									},
									{
										"source": {
											"name": "Aplicativo",
											"type": "String"
										},
										"sink": {
											"path": "$['Aplicativo']"
										}
									},
									{
										"source": {
											"name": "CodigoRastreo",
											"type": "String"
										},
										"sink": {
											"path": "$['CodigoRastreo']"
										}
									},
									{
										"source": {
											"name": "RequestId",
											"type": "String"
										},
										"sink": {
											"path": "$['RequestId']"
										}
									},
									{
										"source": {
											"name": "Severidad",
											"type": "String"
										},
										"sink": {
											"path": "$['Severidad']"
										}
									},
									{
										"source": {
											"name": "Mensaje",
											"type": "String"
										},
										"sink": {
											"path": "$['Mensaje']"
										}
									},
									{
										"source": {
											"name": "Propiedades",
											"type": "String"
										},
										"sink": {
											"path": "$['Propiedades']"
										}
									},
									{
										"source": {
											"name": "Error",
											"type": "String"
										},
										"sink": {
											"path": "$['Error']"
										}
									},
									{
										"source": {
											"name": "FechaHoraRegistro",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['FechaHoraRegistro']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_x1s",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_x1s",
								"type": "DatasetReference",
								"parameters": {
									"cw_folderPath": "@{formatDateTime(pipeline().parameters.windowStart,'yy')}@{formatDateTime(pipeline().parameters.windowStart,'MM')}@{formatDateTime(pipeline().parameters.windowStart,'dd')}@{formatDateTime(pipeline().parameters.windowStart,'HH')}@{formatDateTime(pipeline().parameters.windowStart,'mm')}"
								}
							}
						]
					},
					{
						"name": "sp_depurar_data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_x1s",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[deleteRowsLogEstructuradoPerDay]"
						},
						"linkedServiceName": {
							"referenceName": "techreoprod",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					},
					"windowEnd": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_x1s')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_x1s')]",
				"[concat(variables('factoryId'), '/linkedServices/techreoprod')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_logt_ProvidersLog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline obtener datos diciembre 2022 - solo se ejecuta una vez para tener 2023 a las 00:00 hrs.",
				"activities": [
					{
						"name": "Copy_4cm",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "output-df//logt_ProvidersLog_dic2022"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "SELECT [Id]\r\n      ,[Service]\r\n      ,[TransactionId]\r\n      ,[Provider]\r\n      ,[Method]\r\n      ,[Request]\r\n      ,[Response]\r\n      ,[UserCreationId]\r\n      ,[CreationDate]\r\n      ,[UserLastModifiedId]\r\n      ,[DateLastModificationId]\r\n      ,[IsActive]\r\n      ,[Url_t]\r\n      ,[Headers_t]\r\n  FROM [Cmn_Log].[dbo].[logt_ProvidersLog]\r\n  WHERE [CreationDate] between (\r\n\tselect top 1 [CreationDate]\r\n\tfrom [Cmn_Log].[dbo].[logt_ProvidersLog])\r\n\r\n\tand\r\n\r\n\t(select dateadd(second, 211712, (select top 1 [CreationDate]\r\n\tfrom [Cmn_Log].[dbo].[logt_ProvidersLog])))",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['Id']"
										}
									},
									{
										"source": {
											"name": "Service",
											"type": "String"
										},
										"sink": {
											"path": "$['Service']"
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String"
										},
										"sink": {
											"path": "$['TransactionId']"
										}
									},
									{
										"source": {
											"name": "Provider",
											"type": "String"
										},
										"sink": {
											"path": "$['Provider']"
										}
									},
									{
										"source": {
											"name": "Method",
											"type": "String"
										},
										"sink": {
											"path": "$['Method']"
										}
									},
									{
										"source": {
											"name": "Request",
											"type": "String"
										},
										"sink": {
											"path": "$['Request']"
										}
									},
									{
										"source": {
											"name": "Response",
											"type": "String"
										},
										"sink": {
											"path": "$['Response']"
										}
									},
									{
										"source": {
											"name": "UserCreationId",
											"type": "String"
										},
										"sink": {
											"path": "$['UserCreationId']"
										}
									},
									{
										"source": {
											"name": "CreationDate",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['CreationDate']"
										}
									},
									{
										"source": {
											"name": "UserLastModifiedId",
											"type": "String"
										},
										"sink": {
											"path": "$['UserLastModifiedId']"
										}
									},
									{
										"source": {
											"name": "DateLastModificationId",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['DateLastModificationId']"
										}
									},
									{
										"source": {
											"name": "IsActive",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['IsActive']"
										}
									},
									{
										"source": {
											"name": "Url_t",
											"type": "String"
										},
										"sink": {
											"path": "$['Url_t']"
										}
									},
									{
										"source": {
											"name": "Headers_t",
											"type": "String"
										},
										"sink": {
											"path": "$['Headers_t']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_4cm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_4cm",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_4cm')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_4cm')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_logt_ProvidersLog_manual')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Para generar json por día de la bd [logt_ProvidersLog] de forma manual, hay que cambiar la fecha.",
				"activities": [
					{
						"name": "Copy_q2w",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.23:59:59",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "output-df//logt_ProvidersLog_01012023.json"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "SELECT [Id]\n      ,[Service]\n      ,[TransactionId]\n      ,[Provider]\n      ,[Method]\n      ,[Request]\n      ,[Response]\n      ,[UserCreationId]\n      ,[CreationDate]\n      ,[UserLastModifiedId]\n      ,[DateLastModificationId]\n      ,[IsActive]\n      ,[Url_t]\n      ,[Headers_t]\nFROM [Cmn_Log].[dbo].[logt_ProvidersLog]\nwhere [CreationDate] between\n\t(\n\tselect dateadd(second, 10284254, (select [CreationDate]\n\tFROM [Cmn_Log].[dbo].[logt_ProvidersLog]\n\twhere id = 159247))\n\t)\nAND\n\t(\n\tselect dateadd(second, 12962653, (select [CreationDate]\n\tFROM [Cmn_Log].[dbo].[logt_ProvidersLog]\n\twhere id = 159247))\n\t)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "Int64"
										},
										"sink": {
											"path": "$['Id']"
										}
									},
									{
										"source": {
											"name": "Service",
											"type": "String"
										},
										"sink": {
											"path": "$['Service']"
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String"
										},
										"sink": {
											"path": "$['TransactionId']"
										}
									},
									{
										"source": {
											"name": "Provider",
											"type": "String"
										},
										"sink": {
											"path": "$['Provider']"
										}
									},
									{
										"source": {
											"name": "Method",
											"type": "String"
										},
										"sink": {
											"path": "$['Method']"
										}
									},
									{
										"source": {
											"name": "Request",
											"type": "String"
										},
										"sink": {
											"path": "$['Request']"
										}
									},
									{
										"source": {
											"name": "Response",
											"type": "String"
										},
										"sink": {
											"path": "$['Response']"
										}
									},
									{
										"source": {
											"name": "UserCreationId",
											"type": "String"
										},
										"sink": {
											"path": "$['UserCreationId']"
										}
									},
									{
										"source": {
											"name": "CreationDate",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['CreationDate']"
										}
									},
									{
										"source": {
											"name": "UserLastModifiedId",
											"type": "String"
										},
										"sink": {
											"path": "$['UserLastModifiedId']"
										}
									},
									{
										"source": {
											"name": "DateLastModificationId",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['DateLastModificationId']"
										}
									},
									{
										"source": {
											"name": "IsActive",
											"type": "Boolean"
										},
										"sink": {
											"path": "$['IsActive']"
										}
									},
									{
										"source": {
											"name": "Url_t",
											"type": "String"
										},
										"sink": {
											"path": "$['Url_t']"
										}
									},
									{
										"source": {
											"name": "Headers_t",
											"type": "String"
										},
										"sink": {
											"path": "$['Headers_t']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_q2w",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_q2w",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_q2w')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_q2w')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_4cm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService_azurestoact",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "logt_ProvidersLog_dic2022",
						"container": "output-df"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService_azurestoact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_q2w')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService_azurestoact",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "logt_ProvidersLog_2023_05_final.json",
						"container": "output-df-logt-providerslog"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService_azurestoact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_x1s')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService_azurestoact",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_folderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dataLogEstructurado",
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": "output-df"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService_azurestoact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_4cm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techreoprod",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Service",
						"type": "varchar"
					},
					{
						"name": "TransactionId",
						"type": "varchar"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "Method",
						"type": "varchar"
					},
					{
						"name": "Request",
						"type": "varchar"
					},
					{
						"name": "Response",
						"type": "varchar"
					},
					{
						"name": "UserCreationId",
						"type": "varchar"
					},
					{
						"name": "CreationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UserLastModifiedId",
						"type": "varchar"
					},
					{
						"name": "DateLastModificationId",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "Url_t",
						"type": "varchar"
					},
					{
						"name": "Headers_t",
						"type": "varchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/techreoprod')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_q2w')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techreoprod",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Service",
						"type": "varchar"
					},
					{
						"name": "TransactionId",
						"type": "varchar"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "Method",
						"type": "varchar"
					},
					{
						"name": "Request",
						"type": "varchar"
					},
					{
						"name": "Response",
						"type": "varchar"
					},
					{
						"name": "UserCreationId",
						"type": "varchar"
					},
					{
						"name": "CreationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UserLastModifiedId",
						"type": "varchar"
					},
					{
						"name": "DateLastModificationId",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "Url_t",
						"type": "varchar"
					},
					{
						"name": "Headers_t",
						"type": "varchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/techreoprod')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_x1s')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techreoprod",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlMITable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FechaHoraEventoUTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Aplicativo",
						"type": "varchar"
					},
					{
						"name": "CodigoRastreo",
						"type": "varchar"
					},
					{
						"name": "RequestId",
						"type": "varchar"
					},
					{
						"name": "Severidad",
						"type": "varchar"
					},
					{
						"name": "Mensaje",
						"type": "varchar"
					},
					{
						"name": "Propiedades",
						"type": "varchar"
					},
					{
						"name": "Error",
						"type": "varchar"
					},
					{
						"name": "FechaHoraRegistro",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/techreoprod')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService_azurestoact')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService_azurestoact_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/techreoprod')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"connectionString": "[parameters('techreoprod_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_ofb')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2023-06-03T10:10:00Z",
						"endTime": "2023-06-04T16:04:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_x1s')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pipeline_logEstructurado_depuracion",
							"type": "PipelineReference"
						},
						"parameters": {
							"windowStart": {
								"type": "Expression",
								"value": "[parameters('Trigger_x1s_properties_Pipeline_logEstructurado_depuracion_parameters_windowStart')]"
							},
							"windowEnd": {
								"type": "Expression",
								"value": "[parameters('Trigger_x1s_properties_Pipeline_logEstructurado_depuracion_parameters_windowEnd')]"
							}
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2023-06-03T23:05:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipeline_logEstructurado_depuracion')]"
			]
		}
	]
}